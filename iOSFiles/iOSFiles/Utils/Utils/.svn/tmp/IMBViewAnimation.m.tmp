//
//  IMBViewAnimation.m
//  iOSFiles
//
//  Created by iMobie on 2018/3/8.
//  Copyright © 2018年 iMobie. All rights reserved.
//

#import "IMBViewAnimation.h"
#import <Quartz/Quartz.h>
#import "IMBGradientComponentView.h"

CGFloat const MidiumSizeAnimationTimeInterval = 0.3f;
static CGFloat const IMBViewAnimInterval = 0.12f;

@implementation IMBViewAnimation

+ (void)animationWithView:(NSView *)view frame:(NSRect)frame disable:(BOOL)disable completion:(void(^)(void))completion {
    [self animationWithViews:[NSArray arrayWithObject:view] frames:[NSArray arrayWithObject:[NSValue valueWithRect:frame]] timeInterval:0.05f disable:disable completion:completion];
}

+ (void)animationWithView:(NSView *)view frame:(NSRect)frame timeInterval:(CGFloat)timeInterval disable:(BOOL)disable completion:(void(^)(void))completion {
    [self animationWithViews:[NSArray arrayWithObject:view] frames:[NSArray arrayWithObject:[NSValue valueWithRect:frame]] timeInterval:timeInterval disable:disable completion:completion];
}


+ (void)animationWithViews:(NSArray <NSView *>*)views frames:(NSArray *)frames disable:(BOOL)disable completion:(void(^)(void))completion {
    
    [self animationWithViews:views frames:frames timeInterval:IMBViewAnimInterval disable:disable completion:completion];
    
}

+ (void)animationWithViews:(NSArray <NSView *>*)views frames:(NSArray *)frames timeInterval:(CGFloat)timeInterval disable:(BOOL)disable completion:(void(^)(void))completion {
    
    NSMutableArray *animations = [NSMutableArray array];
    
    NSInteger count = views.count;
    
    for (NSInteger i = 0; i < count; i++) {
        NSView *view = [views objectAtIndex:i];
        NSRect frame = [view frame];
        if (disable) {
            if ([view isKindOfClass:[IMBGradientComponentView class]]) {
                [(IMBGradientComponentView *)view setDisable:YES];
            }
        }
        
        
        NSMutableDictionary *viewDict = [NSMutableDictionary dictionaryWithCapacity:3];
        
        
        [viewDict setObject:view forKey:NSViewAnimationTargetKey];
        
        //set original frame of the view
        [viewDict setObject:[NSValue valueWithRect:frame] forKey:NSViewAnimationStartFrameKey];
        
        
        [viewDict setObject:[frames objectAtIndex:i] forKey:NSViewAnimationEndFrameKey];
        [animations addObject:viewDict];
    }
    
    
    NSViewAnimation *theAnim = [[NSViewAnimation alloc] initWithViewAnimations:animations];
    
    // set time interval of the animation
    [theAnim setDuration:timeInterval];    // .
    [theAnim setAnimationCurve:NSAnimationEaseIn];
    
    // start animation
    [theAnim startAnimation];
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(timeInterval * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        if (disable) {
            for (NSView *view in views) {
                if ([view isKindOfClass:[IMBGradientComponentView class]]) {
                    [(IMBGradientComponentView *)view setDisable:NO];
                }
            }
        }
        
        if (completion) {
            completion();
        }
    });
    
    [theAnim release];
    theAnim = nil;
    
    
}

+ (void)animation2WithViews:(NSArray <NSView *>*)views frames:(NSArray *)frames disable:(BOOL)disable completion:(void(^)(void))completion {
    
    NSInteger count = views.count;
    
    for (NSInteger i = 0; i < count; i++) {
        
        
        [NSAnimationContext runAnimationGroup:^(NSAnimationContext * _Nonnull context) {
            [context setDuration:IMBViewAnimInterval];
            [context setTimingFunction:[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut]];
            NSView *view = [views objectAtIndex:i];
            if (disable) {
                if ([view isKindOfClass:[IMBGradientComponentView class]]) {
                    [(IMBGradientComponentView *)view setDisable:YES];
                }
            }
            NSRect newFrame = [[frames objectAtIndex:i] rectValue];
            [view.animator setFrame:newFrame];
        } completionHandler:nil];
    }
    
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(IMBViewAnimInterval * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        if (disable) {
            for (NSView *view in views) {
                if ([view isKindOfClass:[IMBGradientComponentView class]]) {
                    [(IMBGradientComponentView *)view setDisable:NO];
                }
            }
        }
        if (completion) {
            completion();
        }
    });
    
}

+ (void)animationMouseMovedWithView:(NSView *)view frame:(NSRect)frame disable:(BOOL)disable completion:(void(^)(void))completion {
    [self animationMouseMovedWithView:view frame:frame timeInterval:IMBViewAnimInterval disable:disable completion:completion];
}


+ (void)animationMouseMovedWithView:(NSView *)view frame:(NSRect)frame timeInterval:(CGFloat)timeInterval disable:(BOOL)disable completion:(void(^)(void))completion {
    [view setAlphaValue:0];
    
    [NSAnimationContext runAnimationGroup:^(NSAnimationContext * _Nonnull context) {
        [context setDuration:IMBViewAnimInterval];
        [context setTimingFunction:[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut]];
        [view.animator setFrame:frame];
    } completionHandler:completion];
    
    
    CABasicAnimation *animation0 = [CABasicAnimation animationWithKeyPath:@"opacity"];
    animation0.beginTime = CACurrentMediaTime();
    animation0.fromValue=[NSNumber numberWithFloat:0.0];
    animation0.toValue=[NSNumber numberWithFloat:0.6];
    animation0.duration = timeInterval*0.85f;
    animation0.removedOnCompletion = NO;
    animation0.fillMode = kCAFillModeForwards;
    
    [view setWantsLayer:YES];
    [view.layer addAnimation:animation0 forKey:@"opacityAnim0"];
    
    CABasicAnimation *animation1 = [CABasicAnimation animationWithKeyPath:@"opacity"];
    animation1.beginTime = CACurrentMediaTime() + timeInterval*0.85f;
    animation1.fromValue=[NSNumber numberWithFloat:0.6];
    animation1.toValue=[NSNumber numberWithFloat:1.0];
    animation1.duration = timeInterval*0.35f;
    animation1.removedOnCompletion = NO;
    animation1.fillMode = kCAFillModeForwards;
    
    [view.layer addAnimation:animation1 forKey:@"opacityAnim1"];

}

+ (void)animationMouseMovedAnimWithView:(NSView *)view frame:(NSRect)frame timeInterval:(CGFloat)timeInterval disable:(BOOL)disable isHidden:(BOOL)isHidden completion:(void(^)(void))completion {
    
    NSNumber *opacityFromValue;
    NSNumber *opacityToValue;
    
    NSNumber *scaleFromValue;
    NSNumber *scaleToValue;
    
    if (isHidden) {
        opacityFromValue = [NSNumber numberWithFloat:1.0];
        opacityToValue = [NSNumber numberWithFloat:0];
        
        scaleFromValue = [NSNumber numberWithFloat:1];
        scaleToValue = [NSNumber numberWithFloat:frame.size.height/view.frame.size.height];
        
    }else {
        opacityFromValue = [NSNumber numberWithFloat:0];
        opacityToValue = [NSNumber numberWithFloat:1.0];
        
        
        scaleFromValue = [NSNumber numberWithFloat:view.frame.size.height/frame.size.height];
        scaleToValue = [NSNumber numberWithFloat:1.0f];
    }
    
    CABasicAnimation *animation0 = [CABasicAnimation animationWithKeyPath:@"opacity"];
    animation0.beginTime = CACurrentMediaTime();
    animation0.fromValue = opacityFromValue;
    animation0.toValue = opacityToValue;
    animation0.duration = timeInterval;
    animation0.removedOnCompletion = NO;
    animation0.fillMode = kCAFillModeForwards;
    
    [view setWantsLayer:YES];
    [view.layer removeAllAnimations];
    [view.layer addAnimation:animation0 forKey:@"opacityAnim0"];
    
    if (isHidden == NO) {
        view.frame = frame;
    }
    
    CABasicAnimation *animation=[CABasicAnimation animationWithKeyPath:@"transform.scale.y"];
    animation.fromValue = scaleFromValue;
    animation.toValue = scaleToValue;
    animation.duration = timeInterval;
    animation.beginTime = CACurrentMediaTime();
    animation.repeatCount = 1;
    animation.removedOnCompletion = NO;
    animation.fillMode = kCAFillModeForwards;
    view.layer.anchorPoint = NSMakePoint(0.5, 0);
    [view.layer addAnimation:animation forKey:@"transformScale"];
    
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(timeInterval * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        if (completion) {
            completion();
        }
    });
    
}


+ (void)animationMouseEnteredExitedWithView:(NSView *)view frame:(NSRect)frame disable:(BOOL)disable completion:(void(^)(void))completion {
    [self animationMouseEnteredExitedWithView:view frame:frame timeInterval:IMBViewAnimInterval disable:disable completion:completion];
}

+ (void)animationMouseEnteredExitedWithView:(NSView *)view frame:(NSRect)frame timeInterval:(CGFloat)timeInterval disable:(BOOL)disable completion:(void(^)(void))completion {
    [view setWantsLayer:YES];
//    [view.layer removeAllAnimations];
//    [view setWantsLayer:NO];
    
    [NSAnimationContext endGrouping];
    
    [NSAnimationContext runAnimationGroup:^(NSAnimationContext * _Nonnull context) {
        [context setDuration:timeInterval];
        [context setTimingFunction:[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut]];
        [view.animator setFrame:frame];
    } completionHandler:completion];
    
    
}

+ (void)animationScaleWithView:(NSView *)view frame:(NSRect)frame disable:(BOOL)disable completion:(void(^)(void))completion {
    [self animationScaleWithView:view frame:frame timeInterval:IMBViewAnimInterval disable:disable completion:completion];
}

+ (void)animationScaleWithView:(NSView *)view frame:(NSRect)frame timeInterval:(CGFloat)timeInterval disable:(BOOL)disable completion:(void(^)(void))completion {
    
    
    [NSAnimationContext runAnimationGroup:^(NSAnimationContext * _Nonnull context) {
        [context setDuration:timeInterval];
        [context setTimingFunction:[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut]];
        [view.animator setFrame:frame];
    } completionHandler:completion];
}

+ (void)animationOpacityWithView:(NSView *)view timeInterval:(CGFloat)timeInterval isHidden:(BOOL)isHidden {
    NSNumber *opacityFromValue;
    NSNumber *opacityToValue;
    
    if (isHidden) {
        opacityFromValue = [NSNumber numberWithFloat:1];
        opacityToValue = [NSNumber numberWithFloat:0];
    }else {
        opacityFromValue = [NSNumber numberWithFloat:0];
        opacityToValue = [NSNumber numberWithFloat:1];
    }
    if (timeInterval == 0) {
        timeInterval = MidiumSizeAnimationTimeInterval;
    }
    CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath:@"opacity"];
    animation.beginTime = CACurrentMediaTime();
    animation.fromValue = opacityFromValue;
    animation.toValue = opacityToValue;
    animation.duration = timeInterval;
    animation.removedOnCompletion = NO;
    animation.fillMode = kCAFillModeForwards;
    
    [view setWantsLayer:YES];
    [view.layer removeAllAnimations];
    [view.layer addAnimation:animation forKey:@"opacityAnim"];
}

+ (void)animationWithRotationWithLayer:(CALayer *)layer {
    CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath:@"transform.rotation.z"];
<<<<<<< .mine
    animation.fromValue = 0;
    animation.toValue = @(2*M_PI);
=======
    animation.fromValue = @(-2*M_PI);
    animation.toValue = 0;
>>>>>>> .r3424
    animation.repeatCount = MAXFLOAT;
    animation.duration = 1.f;
    animation.removedOnCompletion = NO;
    animation.fillMode = kCAFillModeForwards;
    animation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];
    [layer setAnchorPoint:NSMakePoint(0.5, 0.5)];
    [layer addAnimation:animation forKey:@"rotationZ"];
}


+ (void)animationPositionYWithView:(NSView *)view toY:(CGFloat)toY timeInterval:(NSTimeInterval)timeInterval completion:(void (^)(void))completion {
    [view setWantsLayer:YES];
    
     
    NSRect toFrame = view.frame;
    toFrame.origin.y = toY;
    
    
    [NSAnimationContext runAnimationGroup:^(NSAnimationContext * _Nonnull context) {
        [context setDuration:timeInterval];
        [context setTimingFunction:[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut]];
        [view.animator setFrame:toFrame];
    } completionHandler:completion];
}

+ (void)animationPositionXWithView:(NSView *)view toX:(CGFloat)toX timeInterval:(NSTimeInterval)timeInterval completion:(void (^)(void))completion {
    [view setWantsLayer:YES];
    
    
    NSRect toFrame = view.frame;
    toFrame.origin.x = toX;
    
    
    [NSAnimationContext runAnimationGroup:^(NSAnimationContext * _Nonnull context) {
        [context setDuration:timeInterval];
        [context setTimingFunction:[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut]];
        [view.animator setFrame:toFrame];
    } completionHandler:completion];
}

@end
