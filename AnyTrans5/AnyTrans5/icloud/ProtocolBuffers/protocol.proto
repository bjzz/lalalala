message DeviceUdids {
	required string psid = 1;
	repeated bytes udids = 2;
	optional bool usuallyFalse = 3;
}

message DeviceEx {
    required bytes udid = 1;
    required int64 fullSize = 2;
    repeated Backup backup = 3;
    required DeviceInfo device = 4;
    required int64 KeysLastModified = 5;
}

message Backup {
	required int32 snapshotID = 1;
	required int64 size = 2;
	required int64 lastModified = 3;
	required BackupInfo info = 5;
	required int64 Committed = 6;
}

message BackupInfo {
    required string name = 1;
    required string firmware = 2;
    required string buildEx = 3;
    required int32 usually2_1 = 4;
    required bytes idk = 5;
    required int32 usually2_2 = 6;
	required int32 usually1 = 7;
}

message DeviceInfo {
	required string deviceClass = 1;
    required string productType = 2;
    required string serialNumber = 3;
    required string deviceColor = 4;
    required string hardwareModel = 5;
    required string marketingName = 6;
}

message Keys {
	repeated Key keySet = 1;
}

message Key {
	required int32 index = 1;
	required bytes data = 2;
}

message GetFiles { //POST this to getFiles, get an AuthChunk in response
	required bytes hash = 1;
}

message FileAuth { //POST this to "authorizeGet"
	repeated AuthChunk main = 1;
}

message AuthChunk { //Also response of getFiles
	required bytes checksum = 1; //First in header
	required string authToken = 2; //Second in header
}

message FileAttribute {
    required string name = 1;
    required bytes value = 2;
}

message FileInfoEx {
    optional int32 keybagID = 1;
	optional string target = 2;
	optional bytes encryptionKey = 3;
	required int64 inodeNumber = 4;
	required int32 Mode = 5;
	required int32 user = 6;
	required int32 group = 7;
	required int64 mtime = 8;
	required int64 atime = 9;
	required int64 ctime = 10;
	required int32 protectionClass = 12;
	repeated FileAttribute attributes = 13;
	optional int32 EncryptionKeyVersion = 14;
	optional int32 DecryptedSize = 15;
}

message FileEx {
    required bytes fileName = 1;
	required string domain = 2;
	required string path = 3;
	optional bytes altFileName = 4;
	required int64 fileSize = 5;
	optional FileInfoEx info = 6;
	required int64 date = 7;
	optional bool bool_val = 9;
}

message Header { //This is a header to be used when downloading chunks
	required string key = 1;
	required string value = 2;
}

message ChunkInfo {
	required bytes chunk_checksum = 1;
	optional bytes chunk_encryption_key = 2;
	required uint32 chunk_length = 3;
}

message NameValuePair {
  required string name = 1;
  required string value = 2;
}

message HostInfo {//This is the response of autorizeGet
  required string hostname = 1;
  required uint32 port = 2;
  required string method = 3;
  required string uri = 4;
  required string transport_protocol = 5;
  required string transport_protocol_version = 6;
  required string scheme = 7;
  repeated NameValuePair headers = 8;
  optional string provider = 9; //s3_us_ore
}

message ErrorResponse {
  required string domain = 1;
  required int32 error_code = 2;
  optional string error_description = 3;
  repeated ErrorResponse underlying_errors = 4;
  repeated NameValuePair name_value_pair = 5;
}

message FileError {
  required bytes file_checksum = 1;
  required ErrorResponse error_response = 2;
}

message ChunkError {
  required bytes chunk_checksum = 1;
  required ErrorResponse error_response = 2;
}

message ChunkErrorIndex {
  required bytes chunk_checksum = 1;
  required ErrorResponse error_response = 2;
  required uint32 chunk_index = 3;
}

message FileChunkError {
  required bytes file_checksum = 1;
  repeated ChunkErrorIndex chunk_error = 2;
}

message StorageContainerError {
  required string storage_container_key = 1;
  required ErrorResponse error_response = 2;
}

message MethodCompletionInfo {
  required string url = 1;
  required uint32 response_status_code = 2;
  optional string response_status_line = 3;
  repeated NameValuePair vendor_response_headers = 4;
  optional bytes response_body = 5;
  optional ErrorResponse error = 6;
  optional bytes client_computed_md5 = 7;
  repeated NameValuePair vendor_nv_pairs = 8;
  repeated NameValuePair client_nv_pairs = 9;
  required string storage_container_authorization_token = 10;
}

message MethodCompletionInfoList {
  repeated MethodCompletionInfo method_completion_info_data = 1;
}

message FileChunkList {
  required bytes file_checksum = 1;
  required string authorization = 2;
  repeated ChunkInfo chunk_info = 3;
}

message FileChunkLists {
  repeated FileChunkList file_chunk_list = 1;
}

message StorageContainerChunkList {
  required bytes storage_container_key = 1;
  required HostInfo host_info = 2;
  repeated bytes chunk_checksum = 3;
  required string storage_container_authorization_token = 4;
}

message StorageContainerChunkLists {
  repeated StorageContainerChunkList storage_container_chunk_list = 1;
  repeated FileError file_error = 2;
  optional uint32 verbosity_level = 3;
}

message StorageContainerErrorList {
  repeated StorageContainerError storage_container_error_data = 1;
}

message FileChecksumAuthorization {
  required bytes file_checksum = 1;
  required string authorization = 2;
  repeated bytes chunk_checksums = 3;
}

message FileChecksumAuthorizationList {
  repeated FileChecksumAuthorization file_checksum_authorization_data = 1;
}

message ChunkReference {
  required uint64 container_index = 1;
  required uint64 chunk_index = 2;
}

message FileChecksumChunkReferences {
 required bytes file_checksum = 1;
 repeated ChunkReference chunk_references = 2; 
}

message FileChecksumStorageHostChunkLists {
  repeated StorageHostChunkList storage_host_chunk_list = 1;
  repeated FileChecksumChunkReferences file_checksum_chunk_references = 2;
}

message FileGroups {// Response from "authorizeGet"
  repeated FileChecksumStorageHostChunkLists file_groups_data = 1;
  repeated FileError file_error = 2;
  repeated FileChunkError file_chunk_error = 3;
  optional uint32 verbosity_level = 4;
}

message ChunkChecksumList {
  repeated bytes chunk_checksum_data = 1;
}

message StorageHostChunkList {
  required HostInfo host_info = 1;
  repeated ChunkInfo chunk_info = 2;
  required string storage_container_key = 3;
  required string storage_container_authorization_token = 4;
}

message StorageHostChunkLists {
  repeated StorageHostChunkList storage_host_chunk_list = 1;
  repeated ChunkError chunk_error = 2;
}